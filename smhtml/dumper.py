#
# Copyright (C) 2019 Satoru SATOH <satoru.satoh@gmail.com>
# License: MIT
#
# pylint: disable=unused-import
r"""MTHML dump functions.

.. versionadded:: 0.0.1

.. seealso:: https://docs.python.jp/2/library/email-examples.html
"""
from __future__ import absolute_import, print_function

import email.mime.audio
import email.mime.base
import email.mime.image
import email.mime.multipart
import email.mime.text
import email
import mimetypes
import os.path
import os

from smhtml.globals import LOGGER


def list_files_itr(input_):
    """
    :param input_: :class:`pahtlib.Path` object (maybe a file or a dir)
    """
    if os.path.isdir(input_):
        for root, _dirs, files in os.walk(input_):
            for fname in files:
                yield os.path.join(root, fname)
    else:
        yield input_


def init_multipart_data(sender=None, subject=None):
    """
    :param sender: 'From' value or None
    :param subject: 'Subject' value or None
    """
    res = email.mime.multipart.MIMEMultipart()
    res["From"] = "<Generated by python-smhtml>" if sender is None else sender
    res["Subject"] = "MHTML data" if subject is None else subject
    res["Date"] = email.utils.formatdate()

    return res


def make_part(filepath):
    """
    :param filepath: :class:`pahtlib.Path` object points a file
    """
    (ctype, encoding) = mimetypes.guess_type(filepath)
    if ctype is None or encoding is not None:
        ctype = "application/octet-stream"

    maintype, subtype = ctype.split("/", 1)

    if maintype == "image":
        with open(filepath, "rb") as fobj:
            part = email.mime.image.MIMEImage(fobj.read(), _subtype=subtype)

    elif maintype == "audio":
        with open(filepath, "rb") as fobj:
            part = email.mime.audio.MIMEAudio(fobj.read(), _subtype=subtype)
    else:
        part = email.mime.base.MIMEBase(maintype, subtype)

        with open(filepath, "rb") as fobj:
            part.set_payload(fobj.read())
            email.encoders.encode_quopri(part)

    part.add_header("Content-Disposition", "attachment", filename=filepath)
    return part


def make_multipart_data(input_, sender=None, subject=None):
    """
    :param input_: :class:`pahtlib.Path` object (maybe a file or a dir)
    :param sender: 'From' value or None
    :param subject: 'Subject' value or None
    """
    mdata = init_multipart_data(sender, subject)
    for filepath in list_files_itr(input_):
        LOGGER.debug("Making the part: %s", filepath)
        part = make_part(filepath)
        mdata.attach(part)

    return mdata


def dumps(input_, **options):
    """
    :param input_: :class:`pahtlib.Path` object (maybe a file or a dir)
    :param options: Optional keyword arguments given to make_multipart_data
    :return: Result multi-part MIMME data as a string
    """
    return make_multipart_data(input_, **options).as_string()


def dump(input_, output, force=False, **options):
    """
    :param input_: :class:`pahtlib.Path` object (maybe a file or a dir)
    :param output: :class:`pahtlib.Path` object represents a file
    :param force: Overwrite even `output` already exists if True
    :param options: Optional keyword arguments given to make_multipart_data
    """
    data_s = dumps(input_, **options)

    if output == "-":  # stdout
        print(data_s)
    else:
        if os.path.exists(output) and not force:
            raise OSError("Output %s already exists!" % output)

        with open(output, "w") as out:
            out.write(data_s)

# vim:sw=4:ts=4:et:
